name: Deploy QCM App

on:
  push:
    branches:
      - main  # Trigger deployment only on main branch

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SSH and deploy
        env:  # << at the same level as run
          GITHUB_REPO_NAME: ${{ secrets.REPO_NAME }}
          GITHUB_USERNAME: ${{ secrets.GITHB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GITHB_TOKEN }}

        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt install -y docker
            sudo apt  install -y docker-compose 
            echo "###############################################################################################"
            echo https://${{ secrets.GITHB_USERNAME }}:${{ secrets.GITHB_TOKEN }}@github.com/${{ secrets.GITHB_USERNAME }}/${{ secrets.REPO_NAME }}.git
            # Go to app directory or clone if it doesn't exist
            if [ ! -d "qcm-generator-rag-app" ]; then
              git clone https://${{ secrets.GITHB_USERNAME }}:${{ secrets.GITHB_TOKEN }}@github.com/${{ secrets.GITHB_USERNAME }}/${{ secrets.REPO_NAME }}.git qcm-generator-rag-app
            fi
            cd qcm-generator-rag-app

            # Pull latest changes
            git remote set-url origin https://${{ secrets.GITHB_USERNAME }}:${{ secrets.GITHB_TOKEN }}@github.com/${{ secrets.GITHB_USERNAME }}/${{ secrets.REPO_NAME }}.git
            git pull origin main

            mkdir -p .github/workflows

            touch .github/workflows/deploy.yml

            sudo cp -r ../certbot ./certbot

            #if its the first time we need to generate ssl certification
            ########################################################################################
            touch ./backend/.env
            # Create ./backend/.env file from GitHub secrets
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}">>./backend/.env
            echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}">>./backend/.env
            echo "FAISS_INDEX_PATH=${{ secrets.FAISS_INDEX_PATH }}">> ./backend/.env
            echo "S3_AWS_ACCESS_KEY_ID=${{ secrets.S3_AWS_ACCESS_KEY_ID }}" >> ./backend/.env
            echo "S3_AWS_SECRET_ACCESS_KEY=${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}" >> ./backend/.env
            echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> ./backend/.env
            echo "REGION=${{ secrets.REGION }}" >> ./backend/.env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> ./backend/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./backend/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> ./backend/.env
            echo "DB_USER=${{ secrets.DB_USER }}" >> ./backend/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./backend/.env
            echo "NGROK_AUTH_TOKEN=${{ secrets.NGROK_AUTH_TOKEN }}" >> ./backend/.env
            echo "UPLOAD_DIR =/app/uploaded_documents" >> ./backend/.env
            echo "EMBEDDER_URL =http://embedder:8001" >> ./backend/.env
            echo "RAG_URL =rhttp://ag:8002" >> ./backend/.env
            ########################################################################################
            touch ./embedder/.env
            echo "FAISS_INDEX_PATH =/app/faiss_db" >> ./embedder/.env
            ########################################################################################
            touch ./rag/.env
            echo "FAISS_INDEX_PATH =/app/faiss_db" >> ./rag/.env
            ########################################################################################
            touch ./web-app/.env
            # Create ./web-app/.env file from GitHub secrets
            echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >>./web-app/.env
            ########################################################################################
            #this env for the phpmyadmin secrets
            touch .env
            echo "PMA_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "PMA_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "PMA_USER=${{ secrets.DB_USER }}" >> .env
            echo "PMA_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "APACHE_AUTH_USER=${{ secrets.APACHE_AUTH_USER }}" >> .env
            echo "APACHE_AUTH_PASSWORD=${{ secrets.APACHE_AUTH_PASSWORD }}" >> .env
            echo "PMA_ABSOLUTE_URI=${{ secrets.PMA_ABSOLUTE_URI }}" >> .env            
            ########################################################################################
            # Stop and remove existing containers
            sudo docker-compose down || true

            # Rebuild and restart containers
            sudo docker-compose build
            sudo docker-compose up -d

            # Check status
            sudo docker-compose ps
            sudo docker-compose logs --tail=50            


            echo "Deployment finished."

          EOF
